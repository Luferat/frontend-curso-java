/**
 * FrontEndeiros 1.0
 * MIT License 2023 By Luferat
 **/

/**
 * 
 * JavaScript do aplicativo.
 * Depende de "jQuery" (https://jquery.com/).
 *
 * OBS 1: Este √© o aplicativo principal, para que o tema (template) do site
 * opere. Posteriormente, quando necess√°rio, cada p√°gina (conte√∫do) ter√° seu
 * pr√≥prio JavaScript, assim, somente o JavaScript necess√°rio ser√° carregado.
 *
 * OBS 2: Todas as instru√ß√µes que iniciam com um cifr√£o ($) s√£o da biblioteca
 * jQuery, ou seja, n√£o s√£o JavaScript "puro" (ou vanilla üòâ).
 *
 * Para saber mais:
 *  ‚Ä¢ https://www.w3schools.com/js/
 *  ‚Ä¢ https://www.w3schools.com/jsref/
 *  ‚Ä¢ https://www.w3schools.com/jquery/
 **/

/**
 * Algumas configura√ß√µes do aplicativo.
 * Dica: voc√™ pode acrescentar novas configura√ß√µes aqui se precisar.
 **/
var app = {
    siteName: 'FrontEndeiros',
    siteSlogan: 'Programando para o futuro'
}

// jQuery ‚Üí Quando o documento estiver pronto, executa a fun√ß√£o principal.
$(document).ready(myApp)

// Aplicativo principal.
function myApp() {

    /**
     * IMPORTANTE!
     * Para que o roteamento funcione corretamente no "live server", √© 
     * necess√°rio que erros 404 abram a p√°gina "index.html".
     **/

    // Extrai a rota da p√°gina da URL e armazena em 'path'.
    var path = window.location.pathname.split('/')[1]

    // Se 'path' √© vazia, 'path' √© a p√°gina inicial.
    if (path == '') path = 'home'

    // Carrega a p√°gina solicitada pela rota em 'path'.
    loadPage(path)

    // Ao clicar em qualquer '<a></a>', chama 'routerLink()'.
    $(document).on('click', 'a', routerLink)

}

/**
 * Fun√ß√£o que processa o clique em um link.
 **/
function routerLink() {

    /**
     * Extrai o valor do atributo "href" do elemento clicado e armazena na 
     * vari√°vel "href".
     * 
     * OBS: $(this) faz refer√™ncia especificamente ao elemento que foi clicado.
     * 
     * Refer√™ncias:
     *  ‚Ä¢ https://api.jquery.com/attr/
     *  ‚Ä¢ https://www.w3schools.com/jquery/jquery_syntax.asp
     **/
    var href = $(this).attr('href').trim().toLowerCase()

    /**
     * Se clicou em um link externo (http://... OU https://...) ou em uma 
     * √¢ncora (#...),devolve o controle da p√°gina para o navegador (return true) 
     * que far√° o processamento normal.
     * 
     * OBS: Os carateres '||' (pipe pipe) significam a l√≥gica 'OR' (OU) onde, se 
     * apenas uma das express√µes for verdadeira, todas as express√µes ser√£o 
     * verdadeiras. Consulte as refer√™ncias.
     * 
     * Refer√™ncias:
     *  ‚Ä¢ https://www.w3schools.com/js/js_if_else.asp
     *  ‚Ä¢ https://www.w3schools.com/jsref/jsref_substr.asp
     *  ‚Ä¢ https://www.w3schools.com/js/js_comparisons.asp
     **/
    if (
        href.substring(0, 7) == 'http://' ||
        href.substring(0, 8) == 'https://' ||
        href.substring(0, 1) == '#'
    )
        // Devolve o controle para o HTML.
        return true

    // Carrega a rota solicitada.
    loadPage(href)

    // Encerra o processamento do link sem fazer mais nada.
    return false
}

/**
 * Carrega uma p√°gina no SPA.
 * O caminho da p√°gina √© passado como string par√¢metro da fun√ß√£o e corresponde
 * a uma das subpastas de "/pages".
 * 
 * Para criar uma nova p√°gina no aplicativo:
 *  1. Acesse a pasta "/pages";
 *  2. Crie uma subpasta com o nome can√¥nico (rota) desta nova p√°gina;
 *     O nome da pasta deve ser curto e usar somente letras e n√∫meros, nunca
 *     iniciando com um n√∫mero e, preferencialmente usando somente letras 
 *     min√∫sculas. Por exemplo: /pages/mypage
 *  3. Crie os 3 componentes da p√°gina na subpasta e seu conte√∫do:
 *     ‚Ä¢ index.html ‚Üí (Model) documento HTML com o "corpo" da p√°gina a ser 
 *                    carregada no SPA;
 *     ‚Ä¢ index.css ‚Üí (View) documento CSS que estiliza a p√°gina.
 *     ‚Ä¢ index.js ‚Üí (Control) JavaScript de controle da p√°gina.
 *  4. Crie os links para a nova p√°gina, apontando-os para a rota desta, por 
 *     exemplo: <a href="mypage">Minha p√°gina</a>
 *  5. J√° para carregar esta p√°gina no SPA pelo JavaScript, comandamos 
 *     "loadPage('mypage')", por exemplo.
 **/
function loadPage(page, updateURL = true) {

    /*
     * Monta os caminhos (path) para os componentes da p√°gina solicitada, 
     * √† partir do valor da vari√°vel "page".
     * Lembre-se que cada p√°gina √© formada por 3 componentes:
     *  ‚Ä¢ index.html ‚Üí (Model) documento HTML com o "corpo" da p√°gina a ser
     *                    carregada no SPA;
     *  ‚Ä¢ index.css ‚Üí (View) documento CSS que estiliza a p√°gina.
     *  ‚Ä¢ index.js ‚Üí (Control) JavaScript de controle da p√°gina.
     * 
     * IMPORTANTE!
     * Mesmo que n√£o seja necess√°rio um CSS ou JavaScript para a p√°gina, os 
     * arquivos "index.css" e "index.js" devem existir na pasta desta p√°gina
     * para evitar "erro 404". Neste caso, insira alguns coment√°rios nos 
     * documentos.
     * 
     * Refer√™ncias:
     *  ‚Ä¢ https://www.w3schools.com/js/js_objects.asp   
     *  ‚Ä¢ https://www.w3schools.com/js/js_string_templates.asp
     */
    const path = {
        html: `pages/${page}/index.html`,
        css: `pages/${page}/index.css`,
        js: `pages/${page}/index.js`
    }

    /**
     * jQuery ‚Üí Faz a requisi√ß√£o (request) do componente HTML da p√°gina, a ser 
     * inserido no SPA.
     * 
     * OBS: carregamos o HTML na mem√≥ria primeiro, para ter certeza que ele 
     * existe e n√£o vai dar erro 404.
     * 
     * Refer√™ncias:
     *  ‚Ä¢ https://www.w3schools.com/jquery/ajax_get.asp
     **/
    $.get(path.html)

        /**
         * Quando ocorrer um "response", os dados obtidos ser√£o carregados na 
         * mem√≥ria do aplicativo e estar√£o dispon√≠veis para uso deste.
         * Neste caso, criamos uma fun√ß√£o "sem nome" (data)=>{} que obt√©m os dados
         * e armazena em "data" para uso posterior.
         * 
         * Refer√™ncias:
         *  ‚Ä¢ https://www.w3schools.com/js/js_arrow_function.asp
         **/
        .done((data) => {

            // Se o documento carregado N√ÉO √© uma p√°gina de conte√∫do...
            if (data.trim().substring(0, 9) != '<article>')

                // Carrega a p√°gina de erro 404 sem atualizar a rota.
                loadPage('e404', false)

            // Se o documento √© uma p√°gina de conte√∫do...
            else {

                // jQuery - Instala o CSS da p√°gina na 'index.html'.
                $('#pageCSS').attr('href', path.css)

                // jQuery - Carrega o HTML no elemento <main></main>.
                $('main').html(data)

                // jQuery - Carrega e executa o JavaScript.
                $.getScript(path.js)
            }

        })

    /**
    * Rola a tela para o in√≠cio, √∫til para links no final da p√°gina.
    * Refer√™ncias:
    *  ‚Ä¢ https://www.w3schools.com/jsref/met_win_scrollto.asp
    **/
    window.scrollTo(0, 0);

    /**
     * Atualiza URL da p√°gina com o endere√ßo da rota:
     * Refer√™ncias:
     *  ‚Ä¢ https://developer.mozilla.org/en-US/docs/Web/API/History/pushState
     **/
    if (updateURL)
        window.history.pushState({}, '', page);

}

/**
 * Muda o t√≠tulo da p√°gina ‚Üí <title></title>
 * 
 * Instru√ß√µes:
 * Em cada arquivo "index.js" de cada p√°gina, inclua uma chamada para esta 
 * fun√ß√£o, passando como par√¢metro o t√≠tulo que deve aparecer.
 * 
 * Quando o par√¢metro estiver vazio (DEFAULT) o t√≠tulo ser√°:
 *  ‚Ä¢ app.sitename - app.siteslogan
 * Quando o par√¢metro for informado, o t√≠tulo ser√°:
 *  ‚Ä¢ app.sitename - par√¢metro
 * 
 **/
function changeTitle(title = '') {

    /**
     * Define o t√≠tulo padr√£o da p√°gina.
     */
    let pageTitle = app.siteName + ' - '

    /**
     * Se n√£o foi definido um t√≠tulo para a p√°gina, 
     * usa o slogan.
     **/
    if (title == '') pageTitle += app.siteSlogan

    /**
     * Se foi definido um t√≠tulo, usa-o.
     */
    else pageTitle += title

    /**
     * Escreve o novo t√≠tulo na tag <title></title>.
     */
    $('title').html(pageTitle)

}